export 
    Sampler, 
    UnitSampler, 
    UniformSampler, 
    NormalSampler,
    field,
    AffineTransformation,
    TransformedSampler



abstract type Sampler end


"""
    UnitSampler{T}(n)

A sampler that produces an `n`-tuples of elements of type `T` via `rand(T,n)`
"""
struct UnitSampler{T<: Number} <: Sampler
    dimen :: Int                                        # n is the dimension of the parameter space, 
                                                        # i.e., the length of a vector in the sample produced.                                
end


"""
    UniformSampler{T}(n)

    A sampler which produces a uniform distrubtion on the unit ball in `T^n`. 
"""
struct UniformSampler{T<: Number} <: Sampler
    dimen :: Int                                        # n is the dimension of the parameter space, 
                                                        # i.e., the length of a vector in the sample produced.                                
end


"""
    NormalSampler{T}(n)

A sampler that produces an `n`-tuples of elements of type `T` via `randn(T,n)`
"""
struct NormalSampler{T<: Number} <: Sampler
    dimen :: Int                                        # n is the dimension of the parameter space, 
                                                        # i.e., the length of a vector in the sample produced.                                
end

field(::UnitSampler{T}) where T<: Number = T
field(::UniformSampler{T}) where T<: Number = T
field(::NormalSampler{T}) where T<: Number = T


function (UNS::UniformSampler{T})(n::Int) where {T<:Number}
    X = [randn(T,UNS.dimen) for _ in 1:n]
    X = [x./norm(x) for x in X]
    return [rand()^(1/UNS.dimen).*x for x in X]
end

function (US::UnitSampler{T})(n::Int) where {T<:Number}
    [rand(T,US.dimen) for i in 1:n]
end

function (NS::NormalSampler{T})(n::Int) where {T<:Number}
    [randn(T,NS.dimen) for i in 1:n]
end

"""
    AffineTransformation(M::AbstractMatrix, t::AbstractVector)
Creates an affine transformation defined by a matrix `M` and a translation vector `t`.
"""
mutable struct AffineTransformation{T<: Number}
    transform_matrix :: Matrix{T}                       # The matrix that linear transforms our predistribution
                                                        # to an ellipse sample.
    translation :: Vector{T}                            # Translation applied to predistribution to get the 
                                                        # desired ellipse sample.
end

function AffineTransformation(M::AbstractMatrix, t::AbstractVector)
    T = promote_type(eltype(M), eltype(t))
    newM = convert(Matrix{T}, M)
    newt = convert(Vector{T}, t)
    return AffineTransformation{T}(newM, newt)
end

"""
    TransformedSampler{T}(predistribution :: Sampler , affine_transformation :: AffineTransformation{T})

A sampler that applies an affine transformation to samples generated by a predistribution sampler.
"""
mutable struct TransformedSampler{T<: Number} <: Sampler
    predistribution :: Sampler                          # predistribution is the method used to sample points
                                                        # from a circle, before it is changed to an ellipse in
                                                        # our desired directions
    affine_transformation :: AffineTransformation{T}   # The affine transformation applied to the predistribution
end

predistribution(TS::TransformedSampler{T}) where {T<:Number} = TS.predistribution

function (TS::TransformedSampler{T})(n::Int) where {T<:Number}
    # Sample from the predistribution
    samples = predistribution(TS)(n)
    
    # Apply the affine transformation to each sample
    return [TS.affine_transformation.transform_matrix * x + TS.affine_transformation.translation for x in samples]
end
